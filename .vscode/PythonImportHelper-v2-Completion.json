[
    {
        "label": "tqdm",
        "importPath": "tqdm",
        "description": "tqdm",
        "isExtraImport": true,
        "detail": "tqdm",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "file_path",
        "kind": 5,
        "importPath": "cnpj_map",
        "description": "cnpj_map",
        "peekOfCode": "file_path = r\"C:\\Users\\francesco.benedetto\\Downloads\\Duplinhas_para_Antecipoo.xlsx\"\ndf_cnpj = pd.read_excel(file_path, usecols=[\"ds_cnpj_usuf\"], dtype=str, sheet_name=\"Duplinhas\")\ndf_cnpj[\"raiz\"] = df_cnpj[\"ds_cnpj_usuf\"].str[:8]\nset_cnpjs = set(df_cnpj[\"raiz\"])\nlst_names = []\nparquet_files = [f for f in os.listdir(\"output\") if f.endswith(\".parquet\")]\nfor parquet_path in tqdm(parquet_files, desc='Lendo arquivos parquet:'):\n    full_path = os.path.join(\"output\", parquet_path)\n    itp = pd.read_parquet(full_path, engine=\"fastparquet\").itertuples(index=False)\n    df_temp = pd.DataFrame([",
        "detail": "cnpj_map",
        "documentation": {}
    },
    {
        "label": "df_cnpj",
        "kind": 5,
        "importPath": "cnpj_map",
        "description": "cnpj_map",
        "peekOfCode": "df_cnpj = pd.read_excel(file_path, usecols=[\"ds_cnpj_usuf\"], dtype=str, sheet_name=\"Duplinhas\")\ndf_cnpj[\"raiz\"] = df_cnpj[\"ds_cnpj_usuf\"].str[:8]\nset_cnpjs = set(df_cnpj[\"raiz\"])\nlst_names = []\nparquet_files = [f for f in os.listdir(\"output\") if f.endswith(\".parquet\")]\nfor parquet_path in tqdm(parquet_files, desc='Lendo arquivos parquet:'):\n    full_path = os.path.join(\"output\", parquet_path)\n    itp = pd.read_parquet(full_path, engine=\"fastparquet\").itertuples(index=False)\n    df_temp = pd.DataFrame([\n        row for row in tqdm(itp, desc=f\"Processando {parquet_path}\")",
        "detail": "cnpj_map",
        "documentation": {}
    },
    {
        "label": "df_cnpj[\"raiz\"]",
        "kind": 5,
        "importPath": "cnpj_map",
        "description": "cnpj_map",
        "peekOfCode": "df_cnpj[\"raiz\"] = df_cnpj[\"ds_cnpj_usuf\"].str[:8]\nset_cnpjs = set(df_cnpj[\"raiz\"])\nlst_names = []\nparquet_files = [f for f in os.listdir(\"output\") if f.endswith(\".parquet\")]\nfor parquet_path in tqdm(parquet_files, desc='Lendo arquivos parquet:'):\n    full_path = os.path.join(\"output\", parquet_path)\n    itp = pd.read_parquet(full_path, engine=\"fastparquet\").itertuples(index=False)\n    df_temp = pd.DataFrame([\n        row for row in tqdm(itp, desc=f\"Processando {parquet_path}\")\n        if row.CNPJ_B√ÅSICO in set_cnpjs",
        "detail": "cnpj_map",
        "documentation": {}
    },
    {
        "label": "set_cnpjs",
        "kind": 5,
        "importPath": "cnpj_map",
        "description": "cnpj_map",
        "peekOfCode": "set_cnpjs = set(df_cnpj[\"raiz\"])\nlst_names = []\nparquet_files = [f for f in os.listdir(\"output\") if f.endswith(\".parquet\")]\nfor parquet_path in tqdm(parquet_files, desc='Lendo arquivos parquet:'):\n    full_path = os.path.join(\"output\", parquet_path)\n    itp = pd.read_parquet(full_path, engine=\"fastparquet\").itertuples(index=False)\n    df_temp = pd.DataFrame([\n        row for row in tqdm(itp, desc=f\"Processando {parquet_path}\")\n        if row.CNPJ_B√ÅSICO in set_cnpjs\n    ])",
        "detail": "cnpj_map",
        "documentation": {}
    },
    {
        "label": "lst_names",
        "kind": 5,
        "importPath": "cnpj_map",
        "description": "cnpj_map",
        "peekOfCode": "lst_names = []\nparquet_files = [f for f in os.listdir(\"output\") if f.endswith(\".parquet\")]\nfor parquet_path in tqdm(parquet_files, desc='Lendo arquivos parquet:'):\n    full_path = os.path.join(\"output\", parquet_path)\n    itp = pd.read_parquet(full_path, engine=\"fastparquet\").itertuples(index=False)\n    df_temp = pd.DataFrame([\n        row for row in tqdm(itp, desc=f\"Processando {parquet_path}\")\n        if row.CNPJ_B√ÅSICO in set_cnpjs\n    ])\n    lst_names.append(df_temp)",
        "detail": "cnpj_map",
        "documentation": {}
    },
    {
        "label": "parquet_files",
        "kind": 5,
        "importPath": "cnpj_map",
        "description": "cnpj_map",
        "peekOfCode": "parquet_files = [f for f in os.listdir(\"output\") if f.endswith(\".parquet\")]\nfor parquet_path in tqdm(parquet_files, desc='Lendo arquivos parquet:'):\n    full_path = os.path.join(\"output\", parquet_path)\n    itp = pd.read_parquet(full_path, engine=\"fastparquet\").itertuples(index=False)\n    df_temp = pd.DataFrame([\n        row for row in tqdm(itp, desc=f\"Processando {parquet_path}\")\n        if row.CNPJ_B√ÅSICO in set_cnpjs\n    ])\n    lst_names.append(df_temp)\ndf_final = pd.concat(lst_names, ignore_index=True)",
        "detail": "cnpj_map",
        "documentation": {}
    },
    {
        "label": "df_final",
        "kind": 5,
        "importPath": "cnpj_map",
        "description": "cnpj_map",
        "peekOfCode": "df_final = pd.concat(lst_names, ignore_index=True)\ndf_final.to_excel(\"nome_cnpj.xlsx\", index=False)\nprint(\"FIM! üéâ\")",
        "detail": "cnpj_map",
        "documentation": {}
    },
    {
        "label": "lst_input_data",
        "kind": 5,
        "importPath": "read_conversion",
        "description": "read_conversion",
        "peekOfCode": "lst_input_data = os.listdir(\"input\")\nprint(lst_input_data)\ncolumns_name = [\n    \"CNPJ_B√ÅSICO\",\n    \"RAZ√ÉO_SOCIAL\",\n    \"NATUREZA_JUR√çDICA\",\n    \"QUALIFICA√á√ÉO_DO_RESPONS√ÅVEL\",\n    \"CAPITAL_SOCIAL_DA_EMPRESA\",\n    \"PORTE_DA_EMPRESA\",\n    \"ENTE_FEDERATIVO_RESPONS√ÅVEL\",",
        "detail": "read_conversion",
        "documentation": {}
    },
    {
        "label": "columns_name",
        "kind": 5,
        "importPath": "read_conversion",
        "description": "read_conversion",
        "peekOfCode": "columns_name = [\n    \"CNPJ_B√ÅSICO\",\n    \"RAZ√ÉO_SOCIAL\",\n    \"NATUREZA_JUR√çDICA\",\n    \"QUALIFICA√á√ÉO_DO_RESPONS√ÅVEL\",\n    \"CAPITAL_SOCIAL_DA_EMPRESA\",\n    \"PORTE_DA_EMPRESA\",\n    \"ENTE_FEDERATIVO_RESPONS√ÅVEL\",\n]\nfor data_file in lst_input_data:",
        "detail": "read_conversion",
        "documentation": {}
    }
]